# pyproject.toml

[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[tool.uv]
package = true

[project]
name = "axiom"
version = "0.5.5"
description = "A cognitive architecture for a new type of symboli-first AI designed for self-directed learning."
authors = [
    { name = "Victor Nevarez", email = "vicsanity623@gmail.com" },
]
readme = {file = "README.md", content-type = "text/markdown"}
license = {file = "LICENSE"}
requires-python = ">=3.11"
dependencies = [
    "APScheduler",
    "Flask",
    "gradio",
    "google-generativeai",
    "llama-cpp-python",
    "networkx~=3.5.0",
    "nltk",
    "python-Levenshtein>=0.25.1",
    "requests",
    "rich",
    "thefuzz>=0.22.1",
    "tqdm",
    "typer",
    "wikipedia",
]

[project.optional-dependencies]
dev = [
    "mypy>=1.18.1",
    "pyngrok",
    "pytest-cov>=6.0.0",
    "pytest>=6.0.0",
    "ruff>=0.9.2",
    "types-requests",
]

[project.urls]
"Source" = "https://github.com/vicsanity623/Axiom-Agent"
"Bug Tracker" = "https://github.com/vicsanity623/Axiom-Agent/issues"

[project.scripts]
axiom-llm = "axiom.scripts.download_model:main"
axiom-train = "axiom.scripts.autonomous_trainer:main"
axiom-render = "axiom.scripts.render_model:main"
axiom-teach = "axiom.scripts.cnt:main"
axiom-webui_app = "axiom.scripts.app:main"
axiom-webui = "axiom.scripts.app_model:main"


# --- Tool Configurations ---

[tool.ruff]
line-length = 88
fix = true

include = ["*.py", "*.pyi", "**/pyproject.toml"]

[tool.ruff.lint]
select = [
    "C4",   # flake8-comprehensions
    "COM",  # flake8-commas
    "E",    # Error
    "F",    # pyflakes
    "W",    # warnings
    "I",    # isort
    "N",    # pep8-naming
    "PT",   # flake8-pytest-style
    "PYI",  # flake8-pyi
    "R",    # Refactor
    "RET",  # flake8-return
    "SLOT", # flake8-slots
    "TCH",  # flake8-type-checking
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
]
extend-ignore = [
    "E501",   # line-too-long
    "COM812",
]

[tool.mypy]
files = ["src/", "tests/"]
enable_error_code = [
    "truthy-bool",
    "mutable-override",
    "exhaustive-match",
]
show_column_numbers = true
show_error_codes = true
show_traceback = true
ignore_missing_imports = true
warn_return_any = true
warn_unused_configs = true
local_partial_types = true
no_implicit_optional = true
warn_unreachable = true

[tool.pytest.ini_options]
minversion = "6.0"
# Add options here to avoid typing them in check.sh
# -v for verbose, --cov for coverage report
addopts = "-v --cov-report=term-missing --cov=axiom"
testpaths = [
    "tests",
]
filterwarnings = [
        "ignore::FutureWarning:networkx",
]
markers = [
    "introspection: tests that require a live LLM model and are skipped in standard CI",
]

[tool.setuptools.package-data]
axiom = ["static/*", "templates/*"]

[tool.coverage.run]
branch = true
source_pkgs = ["axiom"]
omit = []
parallel = true
relative_files = true
source = ["."]

[tool.coverage.report]
precision = 1
skip_covered = true
exclude_also = [
    "pragma: no cover",
    "abc.abstractmethod",
    "if TYPE_CHECKING.*:",
    "if _t.TYPE_CHECKING:",
    "if t.TYPE_CHECKING:",
    "@overload",
    'class .*\bProtocol\b.*\):',
    "raise NotImplementedError",
]
partial_branches = [
    "pragma: no branch",
    "if not TYPE_CHECKING:",
    "if not _t.TYPE_CHECKING:",
    "if not t.TYPE_CHECKING:",
    "if .* or not TYPE_CHECKING:",
    "if .* or not _t.TYPE_CHECKING:",
    "if .* or not t.TYPE_CHECKING:",
]